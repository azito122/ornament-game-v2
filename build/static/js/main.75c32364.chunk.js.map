{"version":3,"sources":["Util.tsx","Cell.tsx","Board.tsx","Menu.tsx","App.tsx","index.tsx"],"names":["Config","initialValues","values","this","deepCopy","id","defaultv","val","get","String","value","console","log","getRandomInt","min","max","Math","floor","random","getRandomItem","arr","length","thing","JSON","parse","stringify","Cell","onMouseOver","props","handleHover","position","onMouseLeave","handleUnhover","onClick","handleClick","type","className","special","status","React","Component","_Cell","Board","buffer","hovered","targeted","emptyCell","cells","Array","height","fill","width","undefined","state","locked","map","groupIndex","key","cell","cellIndex","p","fillCells","clearTargeted","untargetByPositions","flushBuffer","found","findGroupPositions","targetByPositions","addScore","lock","boomByPositions","resetBuffer","s","ns","v","i","getRandomTileType","forEach","r","c","fillCell","unlock","getCell","start","findType","searchSpace","findMatchingAdjacent","row","y","x","push","foundAdjacent","concat","findTypePositions","getAdjacentPositions","adjPosition","recurse","filter","onBoard","positions","setTimeout","bind","bfc","setState","level","callback","Menu","visible","close","open","htmlFor","name","config","getString","onChange","event","setConfig","target","checked","App","score","over","won","season","tilNextSeason","seasonGap","seasonTick","getConfig","getSeasonString","toLowerCase","style","boomed","levelThresholds","newScore","reduce","a","b","seasonId","result","set","handleConfigUpdate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75c32364.chunk.js","sourcesContent":["export type configValue = string|boolean;\nexport type configValues = { [key: string]: configValue }\n\nexport class Config {\n  private values:configValues = {};\n\n  constructor(initialValues:configValues) {\n    this.values = deepCopy(initialValues);\n  }\n\n  public get(id:string, defaultv:configValue = false) {\n    let val = this.values[id];\n    if (typeof val === 'undefined' || val === null) {\n      return defaultv;\n    } else {\n      return val;\n    }\n  }\n\n  public getString(id:string, defaultv:string = ''):string {\n    let val = this.get(id);\n    return String(val);\n  }\n\n  public set(id:string, value:configValue) {\n    console.log('set', id, value);\n    this.values[id] = value;\n    return this;\n  }\n}\n\nexport function getRandomInt(min:number, max:number): number {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport function getRandomItem(arr:any[]) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function deepCopy(thing:any) {\n  return JSON.parse(JSON.stringify(thing));\n}\n\nexport function onBoard(position:[number,number]): boolean {\n  if (\n    position[0] < 0 ||\n    position[1] < 0 ||\n    position[0] >= 11 ||\n    position[1] >= 7\n  ) {\n    return false;\n  }\n  return true;\n}","import React from 'react'\n// import { Position } from './Util'\nimport './Cell.scss'\n\ninterface CellProps {\n  position: [number,number],\n  type: number,\n  handleClick: Function,\n  handleHover: Function,\n  handleUnhover: Function,\n  special: string,\n  status: string,\n}\n\ninterface CellState {}\n\nexport class Cell extends React.Component<CellProps, CellState> {\n  render () {\n    return (\n      <div\n        onMouseOver={() => {this.props.handleHover(this.props.position)}}\n        onMouseLeave={() => {this.props.handleUnhover(this.props.position)}}\n        onClick={() => {this.props.handleClick(this.props.position,this.props.type)}}\n        className={`cell cell-type-${this.props.type} cell-special-${this.props.special} cell-status-${this.props.status}`}>\n        <span></span>\n      </div>\n    )\n  }\n}\n\nexport class _Cell {\n  public type:number;\n  public special:string;\n  public status:string;\n\n  constructor (type:number, special:string = '', status:string = 'filling') {\n    this.type = type;\n    this.special = special;\n    this.status = status;\n  }\n}","import React from 'react'\nimport { getRandomInt, getRandomItem, deepCopy, onBoard } from './Util'\nimport { Cell, _Cell } from './Cell'\nimport './Board.scss'\n\ninterface BoardProps {\n  width: number,\n  height: number,\n  addScore: Function,\n  level: number,\n}\n\ninterface BoardState {\n  cells: _Cell[][],\n  locked: boolean,\n}\n\nexport default class Board extends React.Component<BoardProps, BoardState> {\n  private buffer:_Cell[][];\n  private hovered?:[number,number];\n  private targeted?:[number,number][];\n\n  constructor (props:any) {\n    super(props)\n\n    let emptyCell = new _Cell(0);\n    let cells = Array(this.props.height).fill(Array(this.props.width).fill(emptyCell));\n    this.buffer = JSON.parse(JSON.stringify(cells));\n    this.hovered = undefined;\n\n    this.state = {\n      cells: cells,\n      locked: false,\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"cells\">\n        {\n          this.state.cells.map((cells: _Cell[], groupIndex: number) => {\n            return (\n              <div key={groupIndex} className=\"cells-row\">\n                {\n                  cells.map((cell: _Cell, cellIndex: number) => {\n                    return <Cell\n                      status={cell.status}\n                      position={[cellIndex,groupIndex]}\n                      key={groupIndex * 4 + cellIndex}\n                      type={cell.type}\n                      handleClick={(p:[number,number])=>{this.handleClick(p)}}\n                      handleHover={(p:[number,number])=>{this.handleHover(p)}}\n                      handleUnhover={(p:[number,number])=>{this.handleUnhover(p)}}\n                      special={cell.special}\n                    />\n                  })\n                }\n              </div>\n            )\n          })\n        }\n      </div>\n    )\n  }\n\n  componentDidMount () {\n    this.fillCells();\n  }\n\n  private handleUnhover (position:[number,number]) {\n    this.hovered = undefined;\n    this.clearTargeted();\n  }\n\n  private clearTargeted () {\n    if (this.targeted && this.targeted.length >= 3) {\n      this.untargetByPositions(this.targeted);\n      if (!this.state.locked) {\n        this.flushBuffer();\n      }\n    }\n\n    this.targeted = undefined;\n  }\n\n  private handleHover (position:[number,number]) {\n    this.hovered = position;\n\n    let found = this.findGroupPositions(position);\n\n    if (found[0].length >= 3) {\n      this.targeted = found[1];\n      this.targetByPositions(found[1]);\n      if (!this.state.locked) {\n        this.flushBuffer();\n      }\n    }\n  }\n\n  private handleClick (position:[number,number]) {\n    if (this.state.locked) {\n      return;\n    } else if (this.targeted) {\n      let targeted = deepCopy(this.targeted);\n      this.targeted = undefined;\n\n      if (targeted.length >= 3) {\n        this.props.addScore(targeted.length);\n        this.lock(() => {\n          this.boomByPositions(targeted);\n        });\n      } else {\n        this.resetBuffer();\n      }\n    }\n  }\n\n  private fillCells(s?:number) {\n    let ns:number[];\n\n    if (typeof s !== 'undefined') {\n      let pickn = s > 3 ? s - 1 : 2;\n      ns = Array(pickn).fill(null);\n      ns = ns.map((v:number, i:number) => {\n        return this.getRandomTileType();\n      });\n    }\n\n    this.buffer.forEach( (r:_Cell[]) => {\n      r.forEach( (c:_Cell, i:number) => {\n        if (c.type === 0) {\n          r[i] = this.fillCell(ns);\n        }\n      })\n    });\n    this.flushBuffer();\n\n    this.unlock();\n\n    if (typeof this.hovered !== 'undefined') {\n      // this.handleUnhover(this.hovered);\n      this.clearTargeted();\n      this.handleHover(this.hovered);\n    }\n  }\n\n  private fillCell(ns?:number[]):_Cell {\n    let type = this.getRandomTileType();\n    if (typeof ns !== 'undefined') {\n      let type = getRandomItem(ns);\n    }\n\n    let special = '';\n    if(getRandomInt(1,100) < 5) {\n      special = getRandomItem(['borg', 'gold']);\n    }\n\n    return new _Cell(type, special);\n  }\n\n  private targetByPositions(targeted:[number,number][]) {\n    targeted.forEach((p:[number,number]) => {\n      let cell = this.getCell(p);\n      cell.status = 'targeted';\n    });\n  }\n\n  private untargetByPositions(targeted:[number,number][]) {\n    targeted.forEach((p:[number,number]) => {\n      let cell = this.getCell(p);\n      cell.status = '';\n    });\n  }\n\n\n  private findGroupPositions(start:[number,number]):[number,number][][] {\n    let startCell = this.getCell(start);\n    let findType = startCell.type;\n    let searchSpace = deepCopy(this.buffer)\n\n    return this.findMatchingAdjacent(searchSpace,start,findType,[],[])\n  }\n\n  private findTypePositions(type:number):[number,number][] {\n    let found:[number,number][] = [];\n    this.buffer.forEach((row:_Cell[], y:number) => {\n      row.forEach((cell:_Cell, x:number) => {\n        if (cell.type === type) {\n          found.push([x,y]);\n        }\n      })\n    })\n    return found;\n  }\n\n  private findMatchingAdjacent(\n    searchSpace:&_Cell[][],\n    start:[number,number], findType:number,\n    foundAdjacent:[number,number][],\n    found:[number,number][]):[number,number][][]\n  {\n    if (searchSpace[start[1]][start[0]].type === 0) {\n      return [foundAdjacent,found];\n    }\n\n    foundAdjacent.push(start);\n    found.push(start);\n    if (searchSpace[start[1]][start[0]].special === 'borg') {\n      found = found.concat(this.findTypePositions(searchSpace[start[1]][start[0]].type));\n    }\n    searchSpace[start[1]][start[0]].type = 0;\n\n    let adjacentPositions = this.getAdjacentPositions(start);\n    adjacentPositions.forEach((adjPosition:[number,number]) => {\n      let adjCell = this.getCell(adjPosition);\n      if (adjCell.type === findType) {\n        let recurse = this.findMatchingAdjacent(searchSpace,adjPosition,findType,foundAdjacent,found);\n        // foundAdjacent = foundAdjacent.concat(recurse[0]);\n        found = recurse[1]\n      }\n    })\n    return [foundAdjacent,found];\n  }\n\n  private getAdjacentPositions(p:[number,number]) {\n    let x = p[0];\n    let y = p[1];\n    let positions:[number,number][] = [\n      [x+1,y],\n      [x-1,y],\n      [x,y+1],\n      [x,y-1]\n    ]\n\n    return positions.filter((position:[number,number]) => {\n      return onBoard(position);\n    })\n  }\n\n  private boomByPositions(positions:[number,number][]) {\n    positions.forEach((position:[number,number]) => {\n      let cell = this.getCell(position);\n      if (cell.special === 'gold') {\n        this.props.addScore(15)\n      }\n      cell.status = 'booming';\n    });\n\n    this.flushBuffer();\n\n    setTimeout(() => {\n      positions.forEach((position:[number,number]) => {\n        let cell = this.getCell(position);\n        let cType = cell.type;\n        let cSpecial = cell.special;\n\n        cell.type = 0;\n        cell.special = '';\n        cell.status = 'booming';\n      });\n      this.flushBuffer();\n\n      let bfc = this.fillCells.bind(this);\n      bfc(positions.length)\n    }, 500)\n  }\n\n  private boomByType(type:number) {\n    this.boomByPositions(this.findTypePositions(type));\n    this.flushBuffer();\n  }\n\n  private getCell(p:[number,number]):_Cell {\n    return this.buffer[p[1]][p[0]];\n  }\n\n  private flushBuffer() {\n    let buffer = JSON.parse(JSON.stringify(this.buffer));\n    this.setState((state) => {\n      return {cells: buffer}\n    })\n  }\n\n  private resetBuffer() {\n    this.buffer = JSON.parse(JSON.stringify(this.state.cells));\n  }\n\n  private getRandomTileType():number {\n    let maxmax = 5;\n    let max = this.props.level + 4 >= maxmax ? maxmax : this.props.level + 4;\n    let r = getRandomInt(1,this.props.level + 4);\n    return r >= max ? max : r;\n  }\n\n  private lock(callback?:(() => void)):void {\n    this.setState(() => {\n      return {locked: true}\n    }, callback)\n  }\n\n  private unlock(callback?:(() => void)):void {\n    this.setState(() => {\n      return {locked: false}\n    }, callback)\n  }\n}","import React from 'react'\nimport './Menu.scss'\nimport { Config } from './Util';\n\ninterface MenuProps {\n  setConfig: Function,\n  getConfig: Function,\n  config: Config,\n}\n\ninterface MenuState {\n\tvisible: boolean,\n}\n\nexport default class Menu extends React.Component<MenuProps, MenuState> {\n  constructor(props:any) {\n    super(props);\n\n    this.state = {\n      visible: false,\n    }\n  }\n\n  render () {\n    return (\n    <div className=\"menu-wrapper\">\n      <div\n        className={`menu-backdrop ${this.state.visible ? 'visible' : 'invisible'}`}\n        onClick={this.close.bind(this)}\n      ></div>\n      <div className=\"menu-icon\" onClick={this.open.bind(this)}></div>\n      <div className={`menu ${this.state.visible ? 'visible' : 'invisible'}`}>\n        <div className=\"menu-items-wrapper\">\n          <label htmlFor=\"pause-seasons\">Pause seasons</label>\n          <input\n            name=\"pause-seasons\" id=\"pause-seasons\"\n            type=\"checkbox\"\n            value={this.props.config.getString('pause-seasons', 'false')}\n            onChange={(event) => {this.props.setConfig('pause-seasons', event.target.checked)}}\n          />\n        </div>\n      </div>\n    </div>\n    )\n  }\n\n  private toggle() {\n    this.setState((state) => {\n      return {visible: !state.visible}\n    })\n  }\n\n  private open() {\n    this.setState((state) => {\n      return {visible: true}\n    })\n  }\n\n  private close() {\n    this.setState((state) => {\n      return {visible: false}\n    })\n  }\n}","import './App.scss'\nimport { Config, configValue } from './Util'\nimport Board from './Board'\nimport Menu from './Menu'\nimport React from 'react'\n\ninterface AppProps {\n  seasonGap: number,\n}\n\ninterface AppState {\n  score        : number,\n  level        : number,\n  over         : boolean,\n  won          : boolean,\n  season       : number,\n  tilNextSeason: number,\n  config       : Config,\n}\n\nexport default class App extends React.Component<AppProps, AppState> {\n  constructor (props: any) {\n    super(props)\n\n    this.state = {\n      level        : 1,\n      score        : 0,\n      over         : false,\n      won          : false,\n      season       : 0,\n      tilNextSeason: props.seasonGap,\n      config       : new Config({\n        'pause-seasons': false,\n      }),\n    }\n  }\n\n  componentDidMount () {\n    setTimeout(() => {\n      this.seasonTick();\n    }, 1000)\n  }\n\n  componentWillUnmount () {\n  }\n\n  render () {\n    return (\n      <div className=\"app\">\n        <div className=\"game-header\">\n          <h1 className=\"title\">\n            Nature's Ornaments\n          </h1>\n          <Menu\n            getConfig={(id:string, defaultv:string) => {this.getConfig(id, defaultv)}}\n            setConfig={(id:string, value:string) => {this.setConfig(id, value)}}\n            config={this.state.config}\n          />\n        </div>\n\n        <div className=\"game-intro\">\n          {/* <button className=\"restart-button\" onClick={this.restart}>New Board</button> */}\n        </div>\n\n        <div className={`game-container season-${this.getSeasonString(this.state.season).toLowerCase()}`}>\n          {\n            (this.state.won || this.state.over) &&\n              <div className={`game-message game-${(this.state.won && 'won') || (this.state.over && 'over')}`}>\n                <p>\n                  {this.state.won ? 'You win!' : 'Board over!'}\n                </p>\n\n                <div className='actions'>\n                  {/* <button className='retry-button' onClick={this.restart}>Try again</button> */}\n                </div>\n              </div>\n          }\n          <Board\n            width={11}\n            height={7}\n            addScore={(s:number) => {this.addScore(s)}}\n            level={this.state.level}\n          />\n          <div className=\"sidebar\">\n            <div className=\"score-container\">\n              {this.state.score}\n            </div>\n            <div className=\"level-container\">\n              {this.state.level}\n            </div>\n            <div>\n              Season: {this.getSeasonString(this.state.season)}\n              <div className=\"loading-bar\"><span\n                style={{width:(this.state.tilNextSeason/this.props.seasonGap)*100}}\n              ></span></div>\n            </div>\n          </div>\n        </div>\n\n        <p className=\"game-explanation\">\n        </p>\n      </div>\n    )\n  }\n\n  private addScore (boomed: number) {\n    const levelThresholds = [\n      0,\n      1000,\n      2100,\n      3300,\n      4600,\n      7000,\n      15000,\n      25000,\n      100000000000,\n    ]\n\n    let add = boomed;\n    if (boomed <= 4) {\n      add = 10 * boomed;\n    } else if (boomed <= 7) {\n      add = 15 * boomed;\n    } else if (boomed <= 10) {\n      add = 20 * boomed;\n    } else {\n      add = 25 * boomed;\n    }\n\n    let newScore = add + this.state.score;\n\n    this.setState((state) => {\n      let level = state.level;\n\n      levelThresholds.reduce((a:number, b:number, i:number):number => {\n        if (newScore >= a && newScore <= b) {\n          level = i;\n        }\n\n        return b;\n      })\n\n      return {\n        score: newScore,\n        level: level,\n      }\n    })\n  }\n\n  private getSeasonString(seasonId:number):string {\n    switch (seasonId) {\n      case 0:\n        return 'Spring';\n      case 1:\n        return 'Summer';\n      case 2:\n        return 'Fall';\n      case 3:\n        return 'Winter';\n      default:\n        return 'Spring';\n    }\n  }\n\n  private seasonTick() {\n    this.setState((state) => {\n      if (this.getConfig('pause-seasons', true)) {\n        return;\n      }\n      let result = {};\n      if (state.tilNextSeason <= 0) {\n        result = {\n          season: state.season >= 3 ? 0 : state.season + 1,\n          tilNextSeason: this.props.seasonGap,\n        }\n      } else {\n        result = {\n          tilNextSeason: state.tilNextSeason - 1000,\n        }\n      }\n      setTimeout(this.seasonTick.bind(this), 1000);\n      return result;\n    })\n  }\n\n  private getConfig(id:string, defaultv?:configValue) {\n    return this.state.config.get(id, defaultv);\n  }\n\n  private setConfig(id:string, value:string) {\n    console.log('setConfig', id, value);\n    this.setState((state) => {\n      return {\n        config: state.config.set(id, value),\n      }\n    }, () => {\n      this.handleConfigUpdate(id, value);\n    })\n  }\n\n  private handleConfigUpdate(id:string, value:configValue) {\n    console.log('handleConfigUpdate', id, value);\n    switch(id) {\n      case 'pause-seasons':\n        if (!value) {\n          this.seasonTick();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport '@babel/plugin-proposal-nullish-coalescing-operator'\n\n// declare global {\n//     interface Window { ornamentV2: any; }\n// }\n\n// window.ornamentV2 = window.ornamentV2 || {};\n\n// window.ornamentV2.app = <App />;\nReactDOM.render(<App\n  seasonGap={5000}\n/>, document.getElementById('root'))"],"sourceRoot":""}