{"version":3,"sources":["Util.tsx","Cell.tsx","Board.tsx","App.tsx","index.tsx"],"names":["getRandomInt","min","max","Math","floor","random","getRandomItem","arr","length","deepCopy","thing","JSON","parse","stringify","Cell","onMouseOver","props","handleHover","position","onMouseLeave","handleUnhover","onClick","handleClick","type","className","this","special","status","React","Component","_Cell","Board","buffer","hovered","targeted","emptyCell","cells","Array","height","fill","width","undefined","state","locked","map","groupIndex","key","cell","cellIndex","p","fillCells","clearTargeted","untargetByPositions","flushBuffer","found","findGroupPositions","targetByPositions","addScore","lock","boomByPositions","resetBuffer","s","ns","v","i","getRandomTileType","forEach","r","c","fillCell","unlock","getCell","start","findType","searchSpace","findMatchingAdjacent","row","y","x","push","foundAdjacent","concat","findTypePositions","getAdjacentPositions","adjPosition","recurse","filter","onBoard","positions","setTimeout","bind","bfc","setState","level","callback","App","score","over","won","addition","boomed","levelThresholds","newScore","reduce","a","b","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0d5b02a.chunk.js","sourcesContent":["// export class Position {\n//   public x:number;\n//   public y:number;\n\n//   constructor(x:number,y:number) {\n//     this.x = x;\n//     this.y = y;\n//   }\n\n//   public onBoard(): boolean {\n//     if (\n//       this.x < 0 ||\n//       this.y < 0 ||\n//       this.x >= 11 ||\n//       this.y >= 7\n//     ) {\n//       return false;\n//     }\n//     return true;\n//   }\n// }\n\nexport function getRandomInt(min:number, max:number): number {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport function getRandomItem(arr:any[]) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function deepCopy(thing:any) {\n  return JSON.parse(JSON.stringify(thing));\n}\n\nexport function onBoard(position:[number,number]): boolean {\n  if (\n    position[0] < 0 ||\n    position[1] < 0 ||\n    position[0] >= 11 ||\n    position[1] >= 7\n  ) {\n    return false;\n  }\n  return true;\n}","import React from 'react'\n// import { Position } from './Util'\nimport './Cell.css'\n\ninterface CellProps {\n  position: [number,number],\n  type: number,\n  handleClick: Function,\n  handleHover: Function,\n  handleUnhover: Function,\n  special: string,\n  status: string,\n}\n\ninterface CellState {}\n\nexport class Cell extends React.Component<CellProps, CellState> {\n  render () {\n    return (\n      <div\n        onMouseOver={() => {this.props.handleHover(this.props.position)}}\n        onMouseLeave={() => {this.props.handleUnhover(this.props.position)}}\n        onClick={() => {this.props.handleClick(this.props.position,this.props.type)}}\n        className={`cell cell-type-${this.props.type} cell-special-${this.props.special} cell-status-${this.props.status}`}>\n        <span></span>\n      </div>\n    )\n  }\n}\n\nexport class _Cell {\n  public type:number;\n  public special:string;\n  public status:string;\n\n  constructor (type:number, special:string = '', status:string = 'filling') {\n    this.type = type;\n    this.special = special;\n    this.status = status;\n  }\n}","import React from 'react'\nimport { getRandomInt, getRandomItem, deepCopy, onBoard } from './Util'\nimport { Cell, _Cell } from './Cell'\nimport './Board.css'\n\ninterface BoardProps {\n  width: number,\n  height: number,\n  addScore: Function,\n  level: number,\n}\n\ninterface BoardState {\n  cells: _Cell[][],\n  locked: boolean,\n}\n\nexport default class Board extends React.Component<BoardProps, BoardState> {\n  private buffer:_Cell[][];\n  private hovered?:[number,number];\n  private targeted?:[number,number][];\n\n  constructor (props:any) {\n    super(props)\n\n    let emptyCell = new _Cell(0);\n    let cells = Array(this.props.height).fill(Array(this.props.width).fill(emptyCell));\n    this.buffer = JSON.parse(JSON.stringify(cells));\n    this.hovered = undefined;\n\n    this.state = {\n      cells: cells,\n      locked: false,\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"cells\">\n        {\n          this.state.cells.map((cells: _Cell[], groupIndex: number) => {\n            return (\n              <div key={groupIndex} className=\"cells-row\">\n                {\n                  cells.map((cell: _Cell, cellIndex: number) => {\n                    return <Cell\n                      status={cell.status}\n                      position={[cellIndex,groupIndex]}\n                      key={groupIndex * 4 + cellIndex}\n                      type={cell.type}\n                      handleClick={(p:[number,number])=>{this.handleClick(p)}}\n                      handleHover={(p:[number,number])=>{this.handleHover(p)}}\n                      handleUnhover={(p:[number,number])=>{this.handleUnhover(p)}}\n                      special={cell.special}\n                    />\n                  })\n                }\n              </div>\n            )\n          })\n        }\n      </div>\n    )\n  }\n\n  componentDidMount () {\n    this.fillCells();\n  }\n\n  private handleUnhover (position:[number,number]) {\n    this.hovered = undefined;\n    this.clearTargeted();\n  }\n\n  private clearTargeted () {\n    if (this.targeted && this.targeted.length >= 3) {\n      this.untargetByPositions(this.targeted);\n      if (!this.state.locked) {\n        this.flushBuffer();\n      }\n    }\n\n    this.targeted = undefined;\n  }\n\n  private handleHover (position:[number,number]) {\n    this.hovered = position;\n\n    let found = this.findGroupPositions(position);\n\n    if (found[0].length >= 3) {\n      this.targeted = found[1];\n      this.targetByPositions(found[1]);\n      if (!this.state.locked) {\n        this.flushBuffer();\n      }\n    }\n  }\n\n  private handleClick (position:[number,number]) {\n    if (this.state.locked) {\n      return;\n    } else if (this.targeted) {\n      let targeted = deepCopy(this.targeted);\n      this.targeted = undefined;\n\n      if (targeted.length >= 3) {\n        this.props.addScore(targeted.length);\n        this.lock(() => {\n          this.boomByPositions(targeted);\n        });\n      } else {\n        this.resetBuffer();\n      }\n    }\n  }\n\n  private fillCells(s?:number) {\n    let ns:number[];\n\n    if (typeof s !== 'undefined') {\n      let pickn = s > 3 ? s - 1 : 2;\n      ns = Array(pickn).fill(null);\n      ns = ns.map((v:number, i:number) => {\n        return this.getRandomTileType();\n      });\n    }\n\n    this.buffer.forEach( (r:_Cell[]) => {\n      r.forEach( (c:_Cell, i:number) => {\n        if (c.type === 0) {\n          r[i] = this.fillCell(ns);\n        }\n      })\n    });\n    this.flushBuffer();\n\n    this.unlock();\n\n    if (typeof this.hovered !== 'undefined') {\n      // this.handleUnhover(this.hovered);\n      this.clearTargeted();\n      this.handleHover(this.hovered);\n    }\n  }\n\n  private fillCell(ns?:number[]):_Cell {\n    let type = this.getRandomTileType();\n    if (typeof ns !== 'undefined') {\n      let type = getRandomItem(ns);\n    }\n\n    let special = '';\n    if(getRandomInt(1,100) < 5) {\n      special = getRandomItem(['borg', 'gold']);\n    }\n\n    return new _Cell(type, special);\n  }\n\n  private targetByPositions(targeted:[number,number][]) {\n    targeted.forEach((p:[number,number]) => {\n      let cell = this.getCell(p);\n      cell.status = 'targeted';\n    });\n  }\n\n  private untargetByPositions(targeted:[number,number][]) {\n    targeted.forEach((p:[number,number]) => {\n      let cell = this.getCell(p);\n      cell.status = '';\n    });\n  }\n\n\n  private findGroupPositions(start:[number,number]):[number,number][][] {\n    let startCell = this.getCell(start);\n    let findType = startCell.type;\n    let searchSpace = deepCopy(this.buffer)\n\n    return this.findMatchingAdjacent(searchSpace,start,findType,[],[])\n  }\n\n  private findTypePositions(type:number):[number,number][] {\n    let found:[number,number][] = [];\n    this.buffer.forEach((row:_Cell[], y:number) => {\n      row.forEach((cell:_Cell, x:number) => {\n        if (cell.type === type) {\n          found.push([x,y]);\n        }\n      })\n    })\n    return found;\n  }\n\n  private findMatchingAdjacent(\n    searchSpace:&_Cell[][],\n    start:[number,number], findType:number,\n    foundAdjacent:[number,number][],\n    found:[number,number][]):[number,number][][]\n  {\n    if (searchSpace[start[1]][start[0]].type === 0) {\n      return [foundAdjacent,found];\n    }\n\n    foundAdjacent.push(start);\n    found.push(start);\n    if (searchSpace[start[1]][start[0]].special === 'borg') {\n      found = found.concat(this.findTypePositions(searchSpace[start[1]][start[0]].type));\n    }\n    searchSpace[start[1]][start[0]].type = 0;\n\n    let adjacentPositions = this.getAdjacentPositions(start);\n    adjacentPositions.forEach((adjPosition:[number,number]) => {\n      let adjCell = this.getCell(adjPosition);\n      if (adjCell.type === findType) {\n        let recurse = this.findMatchingAdjacent(searchSpace,adjPosition,findType,foundAdjacent,found);\n        // foundAdjacent = foundAdjacent.concat(recurse[0]);\n        found = recurse[1]\n      }\n    })\n    return [foundAdjacent,found];\n  }\n\n  private getAdjacentPositions(p:[number,number]) {\n    let x = p[0];\n    let y = p[1];\n    let positions:[number,number][] = [\n      [x+1,y],\n      [x-1,y],\n      [x,y+1],\n      [x,y-1]\n    ]\n\n    return positions.filter((position:[number,number]) => {\n      return onBoard(position);\n    })\n  }\n\n  private boomByPositions(positions:[number,number][]) {\n    positions.forEach((position:[number,number]) => {\n      let cell = this.getCell(position);\n      if (cell.special === 'gold') {\n        this.props.addScore(15)\n      }\n      cell.status = 'booming';\n    });\n\n    this.flushBuffer();\n\n    setTimeout(() => {\n      positions.forEach((position:[number,number]) => {\n        let cell = this.getCell(position);\n        let cType = cell.type;\n        let cSpecial = cell.special;\n\n        cell.type = 0;\n        cell.special = '';\n        cell.status = 'booming';\n      });\n      this.flushBuffer();\n\n      let bfc = this.fillCells.bind(this);\n      bfc(positions.length)\n    }, 500)\n  }\n\n  private boomByType(type:number) {\n    this.boomByPositions(this.findTypePositions(type));\n    this.flushBuffer();\n  }\n\n  private getCell(p:[number,number]):_Cell {\n    return this.buffer[p[1]][p[0]];\n  }\n\n  private flushBuffer() {\n    let buffer = JSON.parse(JSON.stringify(this.buffer));\n    this.setState((state) => {\n      return {cells: buffer}\n    })\n  }\n\n  private resetBuffer() {\n    this.buffer = JSON.parse(JSON.stringify(this.state.cells));\n  }\n\n  private getRandomTileType():number {\n    let maxmax = 5;\n    let max = this.props.level + 4 >= maxmax ? maxmax : this.props.level + 4;\n    let r = getRandomInt(1,this.props.level + 4);\n    return r >= max ? max : r;\n  }\n\n  private lock(callback?:(() => void)):void {\n    this.setState(() => {\n      return {locked: true}\n    }, callback)\n  }\n\n  private unlock(callback?:(() => void)):void {\n    this.setState(() => {\n      return {locked: false}\n    }, callback)\n  }\n}","import React from 'react'\nimport Board from './Board'\nimport Menu from './Menu'\nimport './App.css'\n\ninterface AppProps {\n}\n\ninterface AppState {\n  score: number,\n  level: number,\n  addition: number,\n  over: boolean,\n  won: boolean,\n}\n\nexport default class App extends React.Component<AppProps, AppState> {\n  constructor (props: any) {\n    super(props)\n\n    this.state = {\n      level: 1,\n      score: 0,\n      over: false,\n      won: false,\n      addition: 0\n    }\n  }\n\n  componentDidMount () {  }\n\n  componentWillUnmount () {\n  }\n\n  render () {\n    return (\n      <div className=\"app\">\n        <div className=\"game-header\">\n          <h1 className=\"title\">\n            Nature's Ornaments\n          </h1>\n          <div className=\"score-container\">\n            {this.state.score}\n          </div>\n          <div className=\"level-container\">\n            {this.state.level}\n          </div>\n          {/* <Menu /> */}\n        </div>\n\n        <div className=\"game-intro\">\n          {/* <button className=\"restart-button\" onClick={this.restart}>New Board</button> */}\n        </div>\n\n        <div className=\"game-container\">\n          {\n            (this.state.won || this.state.over) &&\n              <div className={`game-message game-${(this.state.won && 'won') || (this.state.over && 'over')}`}>\n                <p>\n                  {this.state.won ? 'You win!' : 'Board over!'}\n                </p>\n\n                <div className='actions'>\n                  {/* <button className='retry-button' onClick={this.restart}>Try again</button> */}\n                </div>\n              </div>\n          }\n          <Board\n            width={11}\n            height={7}\n            addScore={(s:number) => {this.addScore(s)}}\n            level={this.state.level}\n          />\n        </div>\n\n        <p className=\"game-explanation\">\n        </p>\n      </div>\n    )\n  }\n\n  private addScore (boomed: number) {\n    const levelThresholds = [\n      0,\n      1000,\n      2100,\n      3300,\n      4600,\n      7000,\n      15000,\n      25000,\n      100000000000,\n\n    ]\n\n    let add = boomed;\n    if (boomed <= 4) {\n      add = 10 * boomed;\n    } else if (boomed <= 7) {\n      add = 15 * boomed;\n    } else if (boomed <= 10) {\n      add = 20 * boomed;\n    } else {\n      add = 25 * boomed;\n    }\n\n    let newScore = add + this.state.score;\n\n    this.setState((state) => {\n      let level = state.level;\n\n      levelThresholds.reduce((a:number, b:number, i:number):number => {\n        if (newScore >= a && newScore <= b) {\n          level = i;\n        }\n\n        return b;\n      })\n\n      return {\n        score: newScore,\n        level: level,\n      }\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport '@babel/plugin-proposal-nullish-coalescing-operator'\n\n// declare global {\n//     interface Window { ornamentV2: any; }\n// }\n\n// window.ornamentV2 = window.ornamentV2 || {};\n\n// window.ornamentV2.app = <App />;\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}