{"version":3,"sources":["Util.tsx","Cell.tsx","Board.tsx","App.tsx","index.tsx"],"names":["Position","x","y","this","getRandomInt","min","max","Math","floor","random","getRandomItem","arr","length","Cell","onMouseOver","props","handleHover","position","onMouseLeave","handleUnhover","onClick","handleClick","type","className","special","status","React","Component","_Cell","Board","buffer","hovered","targeted","emptyCell","cells","Array","height","fill","width","JSON","parse","stringify","undefined","state","locked","map","groupIndex","key","cell","cellIndex","p","fillCells","untargetByPositions","flushBuffer","findGroupPositions","targetByPositions","addScore","lock","boomByPositions","resetBuffer","s","ns","v","i","getRandomTileType","forEach","r","c","fillCell","unlock","getCell","start","thing","findType","searchSpace","findMatchingAdjacent","found","row","push","getAdjacentPositions","adjPosition","concat","filter","onBoard","positions","additionalBoom","findTypePositions","setTimeout","bind","bfc","setState","level","callback","App","score","over","won","addition","boomed","levelThresholds","newScore","reduce","a","b","ReactDOM","render","document","getElementById"],"mappings":"gVAAaA,EAAb,WAIE,WAAYC,EAASC,GAAW,yBAHzBD,OAGwB,OAFxBC,OAEwB,EAC7BC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EANb,sDAUI,QACEC,KAAKF,EAAI,GACTE,KAAKD,EAAI,GACTC,KAAKF,GAAK,IACVE,KAAKD,GAAK,QAdhB,KAsBO,SAASE,EAAaC,EAAYC,GACvC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,GAAOA,GAG3C,SAASK,EAAcC,GAC5B,OAAOA,EAAIJ,KAAKC,MAAMD,KAAKE,SAAWE,EAAIC,S,WCX/BC,EAAb,iLACa,IAAD,OACR,OACE,yBACEC,YAAa,WAAO,EAAKC,MAAMC,YAAY,EAAKD,MAAME,WACtDC,aAAc,WAAO,EAAKH,MAAMI,cAAc,EAAKJ,MAAME,WACzDG,QAAS,WAAO,EAAKL,MAAMM,YAAY,EAAKN,MAAME,SAAS,EAAKF,MAAMO,OACtEC,UAAS,yBAAoBpB,KAAKY,MAAMO,KAA/B,yBAAoDnB,KAAKY,MAAMS,QAA/D,wBAAsFrB,KAAKY,MAAMU,SAC1G,oCARR,GAA0BC,IAAMC,WAcnBC,EAKX,WAAaN,GAA8D,IAAjDE,EAAgD,uDAA/B,GAAIC,EAA2B,uDAAX,UAAW,yBAJnEH,UAImE,OAHnEE,aAGmE,OAFnEC,YAEmE,EACxEtB,KAAKmB,KAAOA,EACZnB,KAAKqB,QAAUA,EACfrB,KAAKsB,OAASA,GCrBGI,G,mBAKnB,WAAad,GAAY,IAAD,uBACtB,4CAAMA,KALAe,YAIgB,IAHhBC,aAGgB,IAFhBC,cAEgB,EAGtB,IAAIC,EAAY,IAAIL,EAAM,GACtBM,EAAQC,MAAM,EAAKpB,MAAMqB,QAAQC,KAAKF,MAAM,EAAKpB,MAAMuB,OAAOD,KAAKJ,IAJjD,OAKtB,EAAKH,OAASS,KAAKC,MAAMD,KAAKE,UAAUP,IACxC,EAAKH,aAAUW,EAEf,EAAKC,MAAQ,CACXT,MAAOA,EACPU,QAAQ,GAVY,E,sEAcb,IAAD,OACR,OACE,yBAAKrB,UAAU,SAEXpB,KAAKwC,MAAMT,MAAMW,KAAI,SAACX,EAAgBY,GACpC,OACE,yBAAKC,IAAKD,EAAYvB,UAAU,aAE5BW,EAAMW,KAAI,SAACG,EAAaC,GACtB,OAAO,kBAAC,EAAD,CACLxB,OAAQuB,EAAKvB,OACbR,SAAU,IAAIjB,EAASiD,EAAUH,GACjCC,IAAkB,EAAbD,EAAiBG,EACtB3B,KAAM0B,EAAK1B,KACXD,YAAa,SAAC6B,GAAc,EAAK7B,YAAY6B,IAC7ClC,YAAa,SAACkC,GAAc,EAAKlC,YAAYkC,IAC7C/B,cAAe,SAAC+B,GAAc,EAAK/B,cAAc+B,IACjD1B,QAASwB,EAAKxB,oB,0CAahCrB,KAAKgD,c,oCAGgBlC,GACrBd,KAAK4B,aAAUW,EACXvC,KAAK6B,UAAY7B,KAAK6B,SAASpB,QAAU,IAC3CT,KAAKiD,oBAAoBjD,KAAK6B,UACzB7B,KAAKwC,MAAMC,QACdzC,KAAKkD,eAGTlD,KAAK6B,cAAWU,I,kCAGGzB,GACnBd,KAAK4B,QAAUd,EACfd,KAAK6B,SAAW7B,KAAKmD,mBAAmBrC,GACpCd,KAAK6B,SAASpB,QAAU,IAC1BT,KAAKoD,kBAAkBpD,KAAK6B,UACvB7B,KAAKwC,MAAMC,QACdzC,KAAKkD,iB,kCAKUpC,GAAoB,IAAD,OACtC,IAAId,KAAKwC,MAAMC,QAEJzC,KAAK6B,SAAU,CACxB,IAAIA,EAAW7B,KAAK6B,SAEhBA,EAASpB,QAAU,GACrBT,KAAKY,MAAMyC,SAASxB,EAASpB,QAC7BT,KAAKsD,MAAK,WACR,EAAKC,gBAAgB1B,OAGvB7B,KAAKwD,iB,gCAMOC,GAAY,IACxBC,EADuB,OAGV,qBAAND,IAGTC,GADAA,EAAK1B,MADOyB,EAAI,EAAIA,EAAI,EAAI,GACVvB,KAAK,OACfQ,KAAI,SAACiB,EAAUC,GACrB,OAAO,EAAKC,wBAIhB7D,KAAK2B,OAAOmC,SAAS,SAACC,GACpBA,EAAED,SAAS,SAACE,EAASJ,GACJ,IAAXI,EAAE7C,OACJ4C,EAAEH,GAAK,EAAKK,SAASP,UAI3B1D,KAAKkD,cAELlD,KAAKkE,SAEuB,qBAAjBlE,KAAK4B,SACd5B,KAAKa,YAAYb,KAAK4B,W,+BAIT8B,GACf,IAAIvC,EAAOnB,KAAK6D,oBAChB,GAAkB,qBAAPH,EACEnD,EAAcmD,GAG3B,IAAIrC,EAAU,GAKd,OAJGpB,EAAa,EAAE,KAAO,KACvBoB,EAAUd,EAAc,CAAC,OAAQ,UAG5B,IAAIkB,EAAMN,EAAME,K,wCAGCQ,GAAsB,IAAD,OAC7CA,EAASiC,SAAQ,SAACf,GACL,EAAKoB,QAAQpB,GACnBzB,OAAS,gB,0CAIUO,GAAsB,IAAD,OAC/CA,EAASiC,SAAQ,SAACf,GACL,EAAKoB,QAAQpB,GACnBzB,OAAS,Q,yCAKS8C,GACzB,IFxIqBC,EEyIjBC,EADYtE,KAAKmE,QAAQC,GACJjD,KACrBoD,GF1IiBF,EE0IMrE,KAAK2B,OFzI3BS,KAAKC,MAAMD,KAAKE,UAAU+B,KE2I/B,OAAOrE,KAAKwE,qBAAqBD,EAAYH,EAAME,EAAS,M,wCAGpCnD,GACxB,IAAIsD,EAAmB,GAQvB,OAPAzE,KAAK2B,OAAOmC,SAAQ,SAACY,EAAa3E,GAChC2E,EAAIZ,SAAQ,SAACjB,EAAY/C,GACnB+C,EAAK1B,OAASA,GAChBsD,EAAME,KAAK,IAAI9E,EAASC,EAAEC,UAIzB0E,I,2CAGoBF,EAAwBH,EAAgBE,EAAiBG,GAA8B,IAAD,OACjH,OAA2C,IAAvCF,EAAYH,EAAMrE,GAAGqE,EAAMtE,GAAGqB,KACzBsD,GAGTA,EAAME,KAAKP,GACXG,EAAYH,EAAMrE,GAAGqE,EAAMtE,GAAGqB,KAAO,EAEbnB,KAAK4E,qBAAqBR,GAChCN,SAAQ,SAACe,GACX,EAAKV,QAAQU,GACf1D,OAASmD,GACnBG,EAAMK,OAAO,EAAKN,qBAAqBD,EAAYM,EAAYP,EAASG,OAGrEA,K,2CAGoB1B,GAC3B,IAAIjD,EAAIiD,EAAEjD,EACNC,EAAIgD,EAAEhD,EAQV,MAPgB,CACd,IAAIF,EAASC,EAAE,EAAEC,GACjB,IAAIF,EAASC,EAAE,EAAEC,GACjB,IAAIF,EAASC,EAAEC,EAAE,GACjB,IAAIF,EAASC,EAAEC,EAAE,IAGFgF,QAAO,SAAChC,GACvB,OAAOA,EAAEiC,e,sCAIWC,GAAuB,IAAD,OACxCC,EAA4B,GAChCD,EAAUnB,SAAQ,SAAChD,GACjB,IAAI+B,EAAO,EAAKsB,QAAQrD,GACH,SAAjB+B,EAAKxB,QACP6D,EAAiBA,EAAezE,OAAS,EAAIyE,EAAiB,EAAKC,kBAAkBtC,EAAK1B,MAChE,SAAjB0B,EAAKxB,SACd,EAAKT,MAAMyC,SAAS,QAGxB4B,EAAYA,EAAUH,OAAOI,IAEnBpB,SAAQ,SAAChD,GACN,EAAKqD,QAAQrD,GACnBQ,OAAS,aAIhBtB,KAAKkD,cAELkC,YAAW,WACTH,EAAUnB,SAAQ,SAAChD,GACjB,IAAI+B,EAAO,EAAKsB,QAAQrD,GACZ+B,EAAK1B,KACF0B,EAAKxB,QAEpBwB,EAAK1B,KAAO,EACZ0B,EAAKxB,QAAU,GACfwB,EAAKvB,OAAS,aAEhB,EAAK4B,cAELkC,YAAW,WACC,EAAKpC,UAAUqC,KAAK,EAC9BC,CAAIL,EAAUxE,UACb,OACF,O,iCAGcU,GACjBnB,KAAKuD,gBAAgBvD,KAAKmF,kBAAkBhE,IAC5CnB,KAAKkD,gB,8BAGSH,GACd,OAAO/C,KAAK2B,OAAOoB,EAAEhD,GAAGgD,EAAEjD,K,oCAI1B,IAAI6B,EAASS,KAAKC,MAAMD,KAAKE,UAAUtC,KAAK2B,SAC5C3B,KAAKuF,UAAS,SAAC/C,GACb,MAAO,CAACT,MAAOJ,Q,oCAKjB3B,KAAK2B,OAASS,KAAKC,MAAMD,KAAKE,UAAUtC,KAAKwC,MAAMT,U,0CAInD,IACI5B,EAAMH,KAAKY,MAAM4E,MAAQ,GADhB,IACuCxF,KAAKY,MAAM4E,MAAQ,EACnEzB,EAAI9D,EAAa,EAAED,KAAKY,MAAM4E,MAAQ,GAC1C,OAAOzB,GAAK5D,EAAMA,EAAM4D,I,2BAGb0B,GACXzF,KAAKuF,UAAS,WACZ,MAAO,CAAC9C,QAAQ,KACfgD,K,6BAGUA,GACbzF,KAAKuF,UAAS,WACZ,MAAO,CAAC9C,QAAQ,KACfgD,O,GApR4BlE,IAAMC,YCDpBkE,G,mBACnB,WAAa9E,GAAa,IAAD,8BACvB,4CAAMA,KAED4B,MAAQ,CACXgD,MAAO,EACPG,MAAO,EACPC,MAAM,EACNC,KAAK,EACLC,SAAU,GARW,E,mKAiBd,IAAD,OACR,OACE,yBAAK1E,UAAU,OACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,SAAd,sBAGA,yBAAKA,UAAU,mBACZpB,KAAKwC,MAAMmD,OAEd,yBAAKvE,UAAU,mBACZpB,KAAKwC,MAAMgD,QAKhB,yBAAKpE,UAAU,eAIf,yBAAKA,UAAU,mBAEVpB,KAAKwC,MAAMqD,KAAO7F,KAAKwC,MAAMoD,OAC5B,yBAAKxE,UAAS,4BAAwBpB,KAAKwC,MAAMqD,IAAO,MAAW7F,KAAKwC,MAAMoD,MAAQ,SACpF,2BACG5F,KAAKwC,MAAMqD,IAAM,WAAa,eAGjC,yBAAKzE,UAAU,aAKrB,kBAAC,EAAD,CACEe,MAAO,GACPF,OAAQ,GACRoB,SAAU,SAACI,GAAc,EAAKJ,SAASI,IACvC+B,MAAOxF,KAAKwC,MAAMgD,SAItB,uBAAGpE,UAAU,wB,+BAMD2E,GAChB,IAAMC,EAAkB,CACtB,EACA,IACA,KACA,KACA,MAcEC,GAVAF,GAAU,EACN,GAAKA,EACFA,GAAU,EACb,GAAKA,EACFA,GAAU,GACb,GAAKA,EAEL,GAAKA,GAGQ/F,KAAKwC,MAAMmD,MAEhC3F,KAAKuF,UAAS,SAAC/C,GACb,IAAIgD,EAAQhD,EAAMgD,MAUlB,OARAQ,EAAgBE,QAAO,SAACC,EAAUC,EAAUxC,GAK1C,OAJIqC,GAAYE,GAAKF,GAAYG,IAC/BZ,EAAQ5B,GAGHwC,KAGF,CACLT,MAAOM,EACPT,MAAOA,U,GApGkBjE,IAAMC,Y,OCHvC6E,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.164dea73.chunk.js","sourcesContent":["export class Position {\n  public x:number;\n  public y:number;\n\n  constructor(x:number,y:number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  public onBoard(): boolean {\n    if (\n      this.x < 0 ||\n      this.y < 0 ||\n      this.x >= 15 ||\n      this.y >= 10\n    ) {\n      return false;\n    }\n    return true;\n  }\n}\n\nexport function getRandomInt(min:number, max:number): number {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport function getRandomItem(arr:any[]) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function deepCopy(thing:any) {\n  return JSON.parse(JSON.stringify(thing));\n}\n","import React from 'react'\nimport { Position } from './Util'\nimport './Cell.css'\n\ninterface CellProps {\n  position: Position,\n  type: number,\n  handleClick: Function,\n  handleHover: Function,\n  handleUnhover: Function,\n  special: string,\n  status: string,\n}\n\ninterface CellState {}\n\nexport class Cell extends React.Component<CellProps, CellState> {\n  render () {\n    return (\n      <div\n        onMouseOver={() => {this.props.handleHover(this.props.position)}}\n        onMouseLeave={() => {this.props.handleUnhover(this.props.position)}}\n        onClick={() => {this.props.handleClick(this.props.position,this.props.type)}}\n        className={`cell cell-type-${this.props.type} cell-special-${this.props.special} cell-status-${this.props.status}`}>\n        <span></span>\n      </div>\n    )\n  }\n}\n\nexport class _Cell {\n  public type:number;\n  public special:string;\n  public status:string;\n\n  constructor (type:number, special:string = '', status:string = 'filling') {\n    this.type = type;\n    this.special = special;\n    this.status = status;\n  }\n}","import React from 'react'\nimport { getRandomInt, getRandomItem, Position, deepCopy } from './Util'\nimport { Cell, _Cell } from './Cell'\nimport './Board.css'\n\ninterface BoardProps {\n  width: number,\n  height: number,\n  addScore: Function,\n  level: number,\n}\n\ninterface BoardState {\n  cells: _Cell[][],\n  locked: boolean,\n}\n\nexport default class Board extends React.Component<BoardProps, BoardState> {\n  private buffer:_Cell[][];\n  private hovered?:Position;\n  private targeted?:Position[];\n\n  constructor (props:any) {\n    super(props)\n\n    let emptyCell = new _Cell(0);\n    let cells = Array(this.props.height).fill(Array(this.props.width).fill(emptyCell));\n    this.buffer = JSON.parse(JSON.stringify(cells));\n    this.hovered = undefined;\n\n    this.state = {\n      cells: cells,\n      locked: false,\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"cells\">\n        {\n          this.state.cells.map((cells: _Cell[], groupIndex: number) => {\n            return (\n              <div key={groupIndex} className=\"cells-row\">\n                {\n                  cells.map((cell: _Cell, cellIndex: number) => {\n                    return <Cell\n                      status={cell.status}\n                      position={new Position(cellIndex,groupIndex)}\n                      key={groupIndex * 4 + cellIndex}\n                      type={cell.type}\n                      handleClick={(p:Position)=>{this.handleClick(p)}}\n                      handleHover={(p:Position)=>{this.handleHover(p)}}\n                      handleUnhover={(p:Position)=>{this.handleUnhover(p)}}\n                      special={cell.special}\n                    />\n                  })\n                }\n              </div>\n            )\n          })\n        }\n      </div>\n    )\n  }\n\n  componentDidMount () {\n    this.fillCells();\n  }\n\n  private handleUnhover (position:Position) {\n    this.hovered = undefined;\n    if (this.targeted && this.targeted.length >= 3) {\n      this.untargetByPositions(this.targeted);\n      if (!this.state.locked) {\n        this.flushBuffer();\n      }\n    }\n    this.targeted = undefined;\n  }\n\n  private handleHover (position:Position) {\n    this.hovered = position;\n    this.targeted = this.findGroupPositions(position);\n    if (this.targeted.length >= 3) {\n      this.targetByPositions(this.targeted);\n      if (!this.state.locked) {\n        this.flushBuffer();\n      }\n    }\n  }\n\n  private handleClick (position:Position) {\n    if (this.state.locked) {\n      return;\n    } else if (this.targeted) {\n      let targeted = this.targeted;\n\n      if (targeted.length >= 3) {\n        this.props.addScore(targeted.length);\n        this.lock(() => {\n          this.boomByPositions(targeted);\n        });\n      } else {\n        this.resetBuffer();\n      }\n    }\n  }\n\n\n  private fillCells(s?:number) {\n    let ns:number[];\n\n    if (typeof s !== 'undefined') {\n      let pickn = s > 3 ? s - 1 : 2;\n      ns = Array(pickn).fill(null);\n      ns = ns.map((v:number, i:number) => {\n        return this.getRandomTileType();\n      });\n    }\n\n    this.buffer.forEach( (r:_Cell[]) => {\n      r.forEach( (c:_Cell, i:number) => {\n        if (c.type === 0) {\n          r[i] = this.fillCell(ns);\n        }\n      })\n    });\n    this.flushBuffer();\n\n    this.unlock();\n\n    if (typeof this.hovered !== 'undefined') {\n      this.handleHover(this.hovered);\n    }\n  }\n\n  private fillCell(ns?:number[]):_Cell {\n    let type = this.getRandomTileType();\n    if (typeof ns !== 'undefined') {\n      let type = getRandomItem(ns);\n    }\n\n    let special = '';\n    if(getRandomInt(1,100) < 20) {\n      special = getRandomItem(['borg', 'gold']);\n    }\n\n    return new _Cell(type, special);\n  }\n\n  private targetByPositions(targeted:Position[]) {\n    targeted.forEach((p:Position) => {\n      let cell = this.getCell(p);\n      cell.status = 'targeted';\n    });\n  }\n\n  private untargetByPositions(targeted:Position[]) {\n    targeted.forEach((p:Position) => {\n      let cell = this.getCell(p);\n      cell.status = '';\n    });\n  }\n\n\n  private findGroupPositions(start:Position):Position[] {\n    let startCell = this.getCell(start);\n    let findType = startCell.type;\n    let searchSpace = deepCopy(this.buffer)\n\n    return this.findMatchingAdjacent(searchSpace,start,findType,[])\n  }\n\n  private findTypePositions(type:number):Position[] {\n    let found:Position[] = [];\n    this.buffer.forEach((row:_Cell[], y:number) => {\n      row.forEach((cell:_Cell, x:number) => {\n        if (cell.type === type) {\n          found.push(new Position(x,y));\n        }\n      })\n    })\n    return found;\n  }\n\n  private findMatchingAdjacent(searchSpace:&_Cell[][], start:Position, findType:number, found:Position[]):Position[] {\n    if (searchSpace[start.y][start.x].type === 0) {\n      return found;\n    }\n\n    found.push(start);\n    searchSpace[start.y][start.x].type = 0;\n\n    let adjacentPositions = this.getAdjacentPositions(start);\n    adjacentPositions.forEach((adjPosition:Position) => {\n      let adjCell = this.getCell(adjPosition);\n      if (adjCell.type === findType) {\n        found.concat(this.findMatchingAdjacent(searchSpace,adjPosition,findType,found));\n      }\n    })\n    return found;\n  }\n\n  private getAdjacentPositions(p:Position) {\n    let x = p.x;\n    let y = p.y;\n    let positions = [\n      new Position(x+1,y),\n      new Position(x-1,y),\n      new Position(x,y+1),\n      new Position(x,y-1)\n    ]\n\n    return positions.filter((p:Position) => {\n      return p.onBoard();\n    })\n  }\n\n  private boomByPositions(positions:Position[]) {\n    let additionalBoom:Position[] = [];\n    positions.forEach((position:Position) => {\n      let cell = this.getCell(position);\n      if (cell.special === 'borg') {\n        additionalBoom = additionalBoom.length > 0 ? additionalBoom : this.findTypePositions(cell.type);\n      } else if (cell.special === 'gold') {\n        this.props.addScore(15)\n      }\n    });\n    positions = positions.concat(additionalBoom);\n\n    positions.forEach((position:Position) => {\n      let cell = this.getCell(position);\n      cell.status = 'booming';\n    })\n\n\n    this.flushBuffer();\n\n    setTimeout(() => {\n      positions.forEach((position:Position) => {\n        let cell = this.getCell(position);\n        let cType = cell.type;\n        let cSpecial = cell.special;\n\n        cell.type = 0;\n        cell.special = '';\n        cell.status = 'booming';\n      });\n      this.flushBuffer();\n\n      setTimeout(() => {\n        let bfc = this.fillCells.bind(this);\n        bfc(positions.length)\n      }, 300)\n    }, 1000)\n  }\n\n  private boomByType(type:number) {\n    this.boomByPositions(this.findTypePositions(type));\n    this.flushBuffer();\n  }\n\n  private getCell(p:Position):_Cell {\n    return this.buffer[p.y][p.x];\n  }\n\n  private flushBuffer() {\n    let buffer = JSON.parse(JSON.stringify(this.buffer));\n    this.setState((state) => {\n      return {cells: buffer}\n    })\n  }\n\n  private resetBuffer() {\n    this.buffer = JSON.parse(JSON.stringify(this.state.cells));\n  }\n\n  private getRandomTileType():number {\n    let maxmax = 5;\n    let max = this.props.level + 4 >= maxmax ? maxmax : this.props.level + 4;\n    let r = getRandomInt(1,this.props.level + 4);\n    return r >= max ? max : r;\n  }\n\n  private lock(callback?:(() => void)):void {\n    this.setState(() => {\n      return {locked: true}\n    }, callback)\n  }\n\n  private unlock(callback?:(() => void)):void {\n    this.setState(() => {\n      return {locked: false}\n    }, callback)\n  }\n}","import React from 'react'\nimport Board from './Board'\nimport Menu from './Menu'\nimport './App.css'\n\ninterface AppProps {\n}\n\ninterface AppState {\n  score: number,\n  level: number,\n  addition: number,\n  over: boolean,\n  won: boolean,\n}\n\nexport default class App extends React.Component<AppProps, AppState> {\n  constructor (props: any) {\n    super(props)\n\n    this.state = {\n      level: 1,\n      score: 0,\n      over: false,\n      won: false,\n      addition: 0\n    }\n  }\n\n  componentDidMount () {  }\n\n  componentWillUnmount () {\n  }\n\n  render () {\n    return (\n      <div className=\"app\">\n        <div className=\"game-header\">\n          <h1 className=\"title\">\n            Nature's Ornaments\n          </h1>\n          <div className=\"score-container\">\n            {this.state.score}\n          </div>\n          <div className=\"level-container\">\n            {this.state.level}\n          </div>\n          {/* <Menu /> */}\n        </div>\n\n        <div className=\"game-intro\">\n          {/* <button className=\"restart-button\" onClick={this.restart}>New Board</button> */}\n        </div>\n\n        <div className=\"game-container\">\n          {\n            (this.state.won || this.state.over) &&\n              <div className={`game-message game-${(this.state.won && 'won') || (this.state.over && 'over')}`}>\n                <p>\n                  {this.state.won ? 'You win!' : 'Board over!'}\n                </p>\n\n                <div className='actions'>\n                  {/* <button className='retry-button' onClick={this.restart}>Try again</button> */}\n                </div>\n              </div>\n          }\n          <Board\n            width={15}\n            height={10}\n            addScore={(s:number) => {this.addScore(s)}}\n            level={this.state.level}\n          />\n        </div>\n\n        <p className=\"game-explanation\">\n        </p>\n      </div>\n    )\n  }\n\n  private addScore (boomed: number) {\n    const levelThresholds = [\n      0,\n      1000,\n      2100,\n      3300,\n      4600\n    ]\n\n    let add = boomed;\n    if (boomed <= 4) {\n      add = 10 * boomed;\n    } else if (boomed <= 7) {\n      add = 15 * boomed;\n    } else if (boomed <= 10) {\n      add = 20 * boomed;\n    } else {\n      add = 25 * boomed;\n    }\n\n    let newScore = add + this.state.score;\n\n    this.setState((state) => {\n      let level = state.level;\n\n      levelThresholds.reduce((a:number, b:number, i:number):number => {\n        if (newScore >= a && newScore <= b) {\n          level = i;\n        }\n\n        return b;\n      })\n\n      return {\n        score: newScore,\n        level: level,\n      }\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport '@babel/plugin-proposal-nullish-coalescing-operator'\n\n// declare global {\n//     interface Window { ornamentV2: any; }\n// }\n\n// window.ornamentV2 = window.ornamentV2 || {};\n\n// window.ornamentV2.app = <App />;\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}